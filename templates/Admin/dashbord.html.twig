{% extends 'Admin/base.html.twig' %}

{% block title %}Tableau de bord{% endblock %}

{% block stylesheets %}
    <style>
        .card {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .stat-card {
            border-left: 4px solid;
        }
        /* Style for month input */
        input[type="month"] {
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
            line-height: 1.25rem;
            outline: none;
            transition: ring 0.2s;
        }
        input[type="month"]:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
        }
    </style>
{% endblock %}

{% block body %}
    <header class="bg-white shadow-sm">
        <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-gray-800">Tableau de bord</h1>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <input type="text" placeholder="Rechercher..." class="pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                </div>
                <div class="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                    <i class="fas fa-bell text-gray-600"></i>
                </div>
            </div>
        </div>
    </header>
    <main class="flex-1 overflow-y-auto p-4 sm:p-6">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="stat-card bg-white rounded-lg p-6 border-l-4 border-blue-500">
                <div class="flex justify-between items-start">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Livres en stock</p>
                        <p class="text-3xl font-bold text-gray-800">{{ totalLivres }}</p>
                    </div>
                    <div class="p-3 rounded-full bg-blue-100 text-blue-500">
                        <i class="fas fa-book text-xl"></i>
                    </div>
                </div>
            </div>
            <div class="stat-card bg-white rounded-lg p-6 border-l-4 border-green-500">
                <div class="flex justify-between items-start">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Commandes</p>
                        <p class="text-3xl font-bold text-gray-800">{{ totalCommandes }}</p>
                    </div>
                    <div class="p-3 rounded-full bg-green-100 text-green-500">
                        <i class="fas fa-shopping-cart text-xl"></i>
                    </div>
                </div>
                <p class="text-xs text-gray-500 mt-2">Mois en cours</p>
            </div>
            <div class="stat-card bg-white rounded-lg p-6 border-l-4 border-yellow-500">
                <div class="flex justify-between items-start">
                    <div>
                        <p class="text-sm font-medium text-gray-500">En attente</p>
                        <p class="text-3xl font-bold text-gray-800">{{ commandesEnAttente }}</p>
                    </div>
                    <div class="p-3 rounded-full bg-yellow-100 text-yellow-500">
                        <i class="fas fa-clock text-xl"></i>
                    </div>
                </div>
                <p class="text-xs text-gray-500 mt-2">Mois en cours</p>
            </div>
            <div class="stat-card bg-white rounded-lg p-6 border-l-4 border-purple-500">
                <div class="flex justify-between items-start">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Chiffre d'affaires</p>
                        <p class="text-3xl font-bold text-gray-800">{{ totalRevenu|number_format(1, ',', ' ') }} DT</p>
                    </div>
                    <div class="p-3 rounded-full bg-purple-100 text-purple-500">
                        <i class="fas fa-coins text-xl"></i>
                    </div>
                </div>
                <p class="text-xs text-gray-500 mt-2">Mois en cours</p>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Top Selling Books -->
            <div class="card bg-white rounded-lg p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-800">Livres les plus vendus</h2>
                    <div class="flex space-x-2">
                        <input type="month" id="filter-month" value="{{ "now"|date('Y-m') }}"
                               class="border rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                </div>
                <div class="h-64 relative">
                    <canvas id="topBooksChart"></canvas>
                    <div id="topBooksLoader" class="absolute inset-0 flex items-center justify-center bg-white bg-opacity-50 hidden">
                        <i class="fas fa-spinner fa-spin text-blue-500 text-2xl"></i>
                    </div>
                </div>
            </div>

            <!-- Orders Over Time -->
            <div class="card bg-white rounded-lg p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-800">Commandes par période</h2>
                    <select id="filter-period" class="border rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="month" selected>Par mois</option>
                        <option value="week">Par semaine</option>
                        <option value="day">Par jour</option>
                    </select>
                </div>
                <div class="h-64 relative">
                    <canvas id="ordersChart"></canvas>
                    <div id="ordersLoader" class="absolute inset-0 flex items-center justify-center bg-white bg-opacity-50 hidden">
                        <i class="fas fa-spinner fa-spin text-blue-500 text-2xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Row (dynamique) -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Top Clients -->
            <div class="card bg-white rounded-lg p-6">
                <h2 class="text-lg font-semibold text-gray-800 mb-4">Clients les plus fidèles</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Client</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Commandes</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Dépenses</th>
                        </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                        {% for item in topClients %}
                            {% set user = item['user'] %}
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                                            <i class="fas fa-user text-blue-500"></i>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">{{ user.nom }} {{ user.prenom }}</div>
                                            <div class="text-sm text-gray-500">{{ user.email }}</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ item.nbCommandes }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ item.totalDepense|default('0.00') }} DT</td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Recent Orders -->
            <div class="card bg-white rounded-lg p-6">
                <h2 class="text-lg font-semibold text-gray-800 mb-4">Commandes récentes</h2>
                <div class="space-y-4">
                    {% for cmd in recentCommandes %}
                        <div class="flex items-start p-3 border-b border-gray-100">
                            <div class="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                                <i class="fas fa-shopping-cart text-blue-500"></i>
                            </div>
                            <div class="ml-4 flex-1">
                                <div class="flex justify-between">
                                    <p class="text-sm font-medium text-gray-900">{{ cmd.numero }}</p>
                                    <p class="text-sm text-gray-500">{{ cmd.dateCommande|date('d/m/Y') }}</p>
                                </div>
                                <p class="text-sm text-gray-500">{{ cmd.lignesCommande|length }} article(s) • {{ cmd.getTotal() }} DT</p>
                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium
                                    {{ cmd.etat == 'complétée' ? 'bg-green-100 text-green-800' :
                                cmd.etat == 'en cours' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-blue-100 text-blue-800' }}">
                                    {{ cmd.etat|capitalize }}
                                </span>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const topBooksChartCtx = document.getElementById('topBooksChart').getContext('2d');
            const ordersChartCtx = document.getElementById('ordersChart').getContext('2d');

            let topBooksChart;
            let ordersChart;

            // Array of colors for the bars
            const barColors = [
                'rgba(59, 130, 246, 0.7)',  // Blue
                'rgba(34, 197, 94, 0.7)',  // Green
                'rgba(249, 115, 22, 0.7)', // Orange
                'rgba(236, 72, 153, 0.7)', // Pink
                'rgba(139, 92, 246, 0.7)'  // Purple
            ];

            function fetchChartData(month, year, period) {
                console.log(`Fetching data for month=${month}, year=${year}, period=${period}`);
                document.getElementById('topBooksLoader').classList.remove('hidden');
                document.getElementById('ordersLoader').classList.remove('hidden');
                fetch(`/admin/chart/data?month=${month}&year=${year}&period=${period}`)
                    .then(res => {
                        if (!res.ok) {
                            throw new Error(`HTTP error! status: ${res.status}`);
                        }
                        return res.json();
                    })
                    .then(data => {
                        console.log('Data received:', data);
                        updateTopBooksChart(data.topBooks || []);
                        updateOrdersChart(data.ordersData || []);
                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des données:', error);
                        alert('Erreur lors du chargement des données. Veuillez réessayer.');
                    })
                    .finally(() => {
                        document.getElementById('topBooksLoader').classList.add('hidden');
                        document.getElementById('ordersLoader').classList.add('hidden');
                    });
            }

            function updateTopBooksChart(data) {
                const labels = data.length ? data.map(item => item.titre) : ['Aucun livre vendu'];
                const values = data.length ? data.map(item => item.total) : [0];

                if (topBooksChart) topBooksChart.destroy();
                topBooksChart = new Chart(topBooksChartCtx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Nombre de ventes',
                            data: values,
                            backgroundColor: barColors.slice(0, labels.length),
                            borderColor: barColors.slice(0, labels.length).map(color => color.replace('0.7', '1')),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Quantité vendue'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Livre'
                                }
                            }
                        }
                    }
                });
            }

            function updateOrdersChart(data) {
                const labels = data.length ? data.map(item => item.label) : ['Aucune période'];
                const values = data.length ? data.map(item => item.count) : [0];

                if (ordersChart) ordersChart.destroy();
                ordersChart = new Chart(ordersChartCtx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Commandes',
                            data: values,
                            borderColor: 'rgba(59, 130, 246, 1)',
                            backgroundColor: 'rgba(59, 130, 246, 0.2)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Nombre de commandes'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Période'
                                }
                            }
                        }
                    }
                });
            }

            // Initialisation
            const now = new Date();
            const defaultMonth = now.getMonth() + 1;
            const defaultYear = now.getFullYear();
            const defaultPeriod = 'month';

            fetchChartData(defaultMonth, defaultYear, defaultPeriod);

            // Écouteur pour le filtre de mois
            document.getElementById('filter-month').addEventListener('change', e => {
                const value = e.target.value;
                if (!value) {
                    console.warn('Aucune valeur sélectionnée pour le mois');
                    return;
                }
                const [year, month] = value.split('-');
                const monthNumber = parseInt(month, 10);
                if (isNaN(monthNumber) || isNaN(year)) {
                    console.error('Valeurs de mois ou d\'année invalides:', month, year);
                    return;
                }
                fetchChartData(monthNumber, year, document.getElementById('filter-period').value);
            });

            // Écouteur pour le filtre de période
            document.getElementById('filter-period').addEventListener('change', e => {
                const value = document.getElementById('filter-month').value;
                if (!value) {
                    console.warn('Aucune valeur sélectionnée pour le mois');
                    return;
                }
                const [year, month] = value.split('-');
                const monthNumber = parseInt(month, 10);
                if (isNaN(monthNumber) || isNaN(year)) {
                    console.error('Valeurs de mois ou d\'année invalides:', month, year);
                    return;
                }
                fetchChartData(monthNumber, year, e.target.value);
            });
        });
    </script>
{% endblock %}